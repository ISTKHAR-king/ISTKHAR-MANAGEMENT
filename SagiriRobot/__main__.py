import importlib
import re
import time
import random
import asyncio

from telethon import __version__ as tlhver
from platform import python_version as y
from sys import argv

from pyrogram import __version__ as pyrover
from telegram import __version__ as telever
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop, run_async
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver


from SagiriRobot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    PM_START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from SagiriRobot.modules import ALL_MODULES
from SagiriRobot.modules.helper_funcs.chat_status import is_user_admin
from SagiriRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time

Sagiri_IMG = (
    "https://telegra.ph/file/b8a02e0b010714a1bba34.jpg",
    "https://telegra.ph/file/5406ed880a8089c6add3b.jpg",
    "https://te.legra.ph/file/1de42c29380053da56aed.jpg",
    "https://te.legra.ph/file/4481071e3d119bbf0f54f.jpg",
)  

PM_START_TEX = """
W·¥á ü·¥Ñ·¥è·¥ç·¥á `{}`,  . 
"""


PM_START_TEXT = """ 
 ú·¥á è {}, [ü´ß]({})

*ùô∏'·¥ç ùô∂·¥è·¥ä·¥è ·¥èÍú∞ Íú±…™x ·¥á è·¥áÍú±!*

‚å• ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á & Íú∞·¥ÄÍú±·¥õ …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ ·¥°…™·¥õ ú ·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥Ñ·¥è·¥è ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás  ü…™·¥ã·¥á:
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
*„Éª·¥ç·¥úÍú±…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä.*
*„Éª…™·¥ç·¥ò·¥èÍú±·¥õ·¥á Ä ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥è Ä.*
*„ÉªÍú±·¥ò·¥Ä·¥ç ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥.*
*„Éª·¥ò ú- ü·¥è…¢·¥è ·¥ç·¥Ä·¥ã·¥á Ä.*
*„Éª ô·¥á·¥õ·¥õ…™…¥…¢ ·¥Ö·¥è ü ü·¥Ä Ä …¢·¥Ä·¥ç·¥áÍú±.*
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ñ∏ ·¥õ·¥Ä·¥ò ·¥è…¥  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú ·¥Ä…¥·¥Ö ·¥ç·¥úÍú±…™·¥Ñ  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è  ü·¥á·¥Ä Ä…¥ ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú.
"""

buttons = [
    [
        InlineKeyboardButton(
            text="‚õ© Íú±·¥ú·¥ç·¥ç·¥è…¥ ·¥ç·¥á ‚õ© ",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text="üçÅ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±üçÅ", callback_data="help_back"),
        InlineKeyboardButton(text="üéµ·¥ç·¥ús…™·¥Ñ  ú·¥á ü·¥òüéµ", callback_data="Music_"),
    ],
    [
        InlineKeyboardButton(text="s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/Gojosupportchat"),
        InlineKeyboardButton(text="·¥Ä ô·¥è·¥ú·¥õ", callback_data="sagiri_"), 
    ],
    [
        InlineKeyboardButton(text="üëæ·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ èüëæ", callback_data="Gojoanime_"),  
        
    ],
    
]

HELP_STRINGS = f"""
[…¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú](https://telegra.ph/file/80c35656e795bc58d58fc.jpg)
¬ª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös."""

DONATE_STRING = """ ú·¥á è ·¥Ö·¥ú·¥Ö·¥á,
   ú·¥Ä·¥©·¥© è ·¥õ·¥è  ú·¥á·¥Ä Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á.

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è [·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä](f"tg://user?id={OWNER_ID}") “ì·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥†…™s…™·¥õ ·¥ç è [s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](f"https://t.me/{SUPPORT_CHAT}") ·¥Ä…¥·¥Ö ·¥Äs·¥ã ·¥õ ú·¥á Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("SagiriRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    
        

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


@run_async
def test(update: Update, context: CallbackContext):
    # pprint(eval(str(update)))
    update.effective_message.reply_text(
        "Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN
    )
    update.effective_message.reply_text("This person edited a message")
    print(update.effective_message)


def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è BACK", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            
            x=update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAEEDmVk6ZBdk0ldUBR7j5V0AAHOTF9p3iMAAlcJAAJtslFXGvhj-Smiu1wwBA")
            x.delete()
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            
            time.sleep(0.2)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢.")
            time.sleep(0.0)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢..")
            time.sleep(0.0)
            lol.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
            time.sleep(0.0)
            lol.delete()
            
            
            update.effective_message.reply_text(
                PM_START_TEXT.format(escape_markdown(first_name), random.choice(Sagiri_IMG), BOT_NAME),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            random.choice(Sagiri_IMG),
            caption="‚óéùô∑·¥á è  ô·¥ú·¥Ö·¥Ö è ·¥õ ú…™Íú± …™Íú± …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú !\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ \nü´ß ·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ. \n‚ÄãÀπ·¥°·¥è Ä·¥ã…™…¥…¢ ·¥ò Ä·¥è·¥ò·¥á ü è Íú±…™…¥·¥Ñ·¥áÀº : <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ",
                            url=f"https://t.me/Gojo_support_chat",
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú±",
                            url=f"https://t.me/gojo_satoru_updates",
                        ),
                    ]
                ]
            ),
        )
            



def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "‚ñ∏ *ùô∞·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ùô≤ùôæùôºùôºùô∞ùôΩùô≥ùöÇ ùôµùôæùöÅ‚Äã‚Äã* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def Sagiri_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "sagiri_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"*·¥ã·¥è…¥…™·¥Ñ ú…™·¥°·¥Ä,*\nüë§  *·¥õ ú…™s …™s {dispatcher.bot.first_name}*"
            "\n\n‚ó∏ ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ & ·¥ç·¥úÍú±…™·¥Ñ  Ä·¥è ô·¥è·¥õ ·¥°…™·¥õ ú ·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥·¥Ä ü…™·¥õ è ·¥° ú…™·¥Ñ ú  ú·¥ÄÍú±  ü·¥èÍú±·¥õ ·¥èÍú∞ Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú± ·¥Ä…¥·¥Ö …¢·¥Ä·¥ç·¥áÍú±!"
            "\n\n‚ñ∏ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú  ú·¥ÄÍú± ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú±  ü…™·¥ã·¥á ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ …™·¥ç·¥ò·¥èÍú±·¥õ·¥á Ä, ·¥ò ú- ü·¥è…¢·¥è ·¥ç·¥Ä·¥ã·¥á Ä,  ô·¥á·¥õ·¥õ…™…¥…¢ …¢·¥Ä·¥ç·¥áÍú± ·¥á·¥õ·¥Ñ." 
            "\n\n‚ñ∏ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú  ú·¥ÄÍú± ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á ·¥° ú…™·¥Ñ ú …¢ Ä·¥á·¥á·¥õ ·¥úÍú±·¥á ÄÍú±."
            "\n\n‚ñ∏ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú  ú·¥ÄÍú±  ü·¥è·¥õÍú± ·¥èÍú∞ Íú∞·¥ú…¥ Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú±  ü…™·¥ã·¥á  ô·¥Ä·¥õ·¥ç·¥Ä…¥, Íú±…™…¢·¥ç·¥Ä, ·¥òÍú± è·¥Ñ ú·¥è ·¥á·¥õ·¥Ñ."
            "\n\n‚ñ∏¬† Íú±·¥Ä·¥õ·¥è Ä·¥ú Íú∞ Ä·¥á·¥Ä·¥ã…™…¥…¢ …¢·¥è·¥ä·¥è ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è Íú±·¥è…¥…¢ ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥ò·¥è·¥°·¥á Ä ·¥èÍú∞ Íú±…™x ·¥á è·¥áÍú±.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥° ú·¥è …™Íú± …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú ‚éã", url=f"https://t.me/Gojo_Satoru_botx/13"
                        ),
                        InlineKeyboardButton(
                            text="Íú∞·¥è Ä ·¥ç·¥è Ä·¥á ùöÄ·¥ú·¥á Ä è ‚òá", 
                            url="https://t.me/nexius_support",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥áüîô", callback_data="sagiri_back"),
                    ],
                ]
            ),
        )
    elif query.data == "sagiri_back":
        first_name = update.effective_user.first_name 
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), random.choice(Sagiri_IMG), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )


def Music_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Music_":
        query.message.edit_text(
            text=f"""
 ** ú·¥á è   \n\n·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è {dispatcher.bot.first_name} \n\n…™ ·¥Ä·¥ç ·¥Ä…¥ Íú∞·¥ÄÍú±·¥õ ·¥Ä…¥·¥Ö ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á ·¥†·¥Ñ ·¥ò ü·¥Ä è·¥á Ä ·¥°…™·¥õ ú 24x7 ·¥Ä·¥Ñ·¥õ…™·¥†·¥á·¥á Íú∞·¥è Ä  ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö …¢ Ä·¥è·¥ú·¥òÍú± \n\nÍú∞·¥á·¥á ü  ü·¥Ä…¢ Íú∞ Ä·¥á·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è è  ú…™…¢ ú Q·¥ú·¥Ä ü…™·¥õ è ·¥Ä·¥ú·¥Ö…™·¥è ·¥Ä…¥·¥Ö ·¥†…™·¥Ö·¥á·¥è ** 
""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        
                InlineKeyboardButton(
                    text=" A·¥Ö·¥ç…™…¥Íú± ",
                    callback_data="Music_1",
                ),
                InlineKeyboardButton(
                    text=" A·¥ú·¥õ ú ",
                    callback_data="Music_2",
                ),
            
                InlineKeyboardButton(
                    text=" B ü·¥è·¥Ñ·¥ã ",
                    callback_data="Music_3",
                ),
            ],
            [
                InlineKeyboardButton(
                    text=" G-·¥Ñ·¥ÄÍú±·¥õ ",
                    callback_data="Music_4",
                ),
                InlineKeyboardButton(
                    text=" G ô·¥Ä…¥ ",
                    callback_data="Music_5",
                ),
                InlineKeyboardButton(
                    text=" L è Ä…™·¥ÑÍú± ",
                    callback_data="Music_6",
                ),
            ],
            [
                InlineKeyboardButton(
                    text=" P ü·¥Ä è ü…™Íú±·¥õ ",
                    callback_data="Music_7",
                ),
                InlineKeyboardButton(
                    text=" V·¥è…™·¥Ñ·¥á-·¥Ñ ú·¥Ä·¥õ ",
                    callback_data="Music_8",
                ),
                InlineKeyboardButton(
                    text=" P ü·¥Ä è ",
                    callback_data="Music_9",
                ),
            ],   
            [
                InlineKeyboardButton(
                    text=" S·¥ú·¥Ö·¥è ",
                    callback_data="Music_10",
                ),
                InlineKeyboardButton(
                    text=" S·¥õ·¥Ä Ä·¥õ ",
                    callback_data="Music_11",
                ),
                InlineKeyboardButton(
                    text=" P…™…¥…¢ ",
                    callback_data="Music_12",
                ),
            ],        
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥áüîô", callback_data="sagiri_back"),
                    ],
                ]
           ),
        )
    elif query.data == "Music_1":
        query.message.edit_text(
            text=f"*¬ª ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ¬´*"
            f"""


·¥ä·¥ús·¥õ ·¥Ä·¥Ö·¥Ö ·¥Ñ …™…¥ ·¥õ ú·¥á s·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥è“ì ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥ús·¥á ·¥õ ú·¥á·¥ç “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü.

/pause : ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

/resume :  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç.

/skip : s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥ «´·¥ú·¥á·¥ú·¥á.

/end ·¥è Ä /stop : ·¥Ñ ü·¥á·¥Ä Äs ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.

/player : …¢·¥á·¥õ ·¥Ä …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥© ü·¥Ä è·¥á Ä ·¥©·¥Ä…¥·¥á ü.

/queue : s ú·¥è·¥°s ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ü…™s·¥õ.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_2":
        query.message.edit_text(
            text=f"*¬ª ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs ¬´*"
            f"""

·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ. [·¥Ä·¥Ö·¥ç…™…¥s ·¥è…¥ ü è]

/auth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] : ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ä·¥ú·¥õ ú  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.

/unauth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á] :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ.

/authusers : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ä·¥ú·¥õ ú ·¥ús·¥á Äs  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_3":
        query.message.edit_text(
            text=f"*¬ª  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ñ ú·¥Ä·¥õ ¬´*"
            f""" 

 ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á [·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs]

/blacklistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] :  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ ·¥Ä ·¥Ñ ú·¥Ä·¥õ “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.

/whitelistchat [·¥Ñ ú·¥Ä·¥õ …™·¥Ö] : ·¥° ú…™·¥õ·¥á ü…™s·¥õ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ.

/blacklistedchat : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.


  ô ü·¥è·¥Ñ·¥ã ·¥ús·¥á Äs:

/block [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä] : s·¥õ·¥Ä Ä·¥õs …™…¢…¥·¥è Ä…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä, s·¥è ·¥õ ú·¥Ä·¥õ  ú·¥á ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.

/unblock [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : ·¥ú…¥ ô ü·¥è·¥Ñ·¥ãs ·¥õ ú·¥á  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Ä.

/blockedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_4":
        query.message.edit_text(
            text=f"*¬ª  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ¬´*"
            f"""

/broadcast , /gcast  [·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á] :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.

 ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢ ·¥ç·¥è·¥Ö·¥ás:

-pin : ·¥©…™…¥s  è·¥è·¥ú Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás …™…¥ s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.
-pinloud : ·¥©…™…¥s  è·¥è·¥ú Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á …™…¥ s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ç·¥á·¥ç ô·¥á Äs.
-user :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õs ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Äs ·¥° ú·¥è  ú·¥Ä·¥†·¥á s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö  è·¥è·¥ú Ä  ô·¥è·¥õ.
-assistant :  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Äss…™·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
-nobot : “ì·¥è Ä·¥Ñ·¥ás ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è …¥·¥è·¥õ  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á..

·¥áx·¥Ä·¥ç·¥© ü·¥á: /broadcast -user -assistant -pin ·¥õ·¥ás·¥õ…™…¥…¢  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_5":
        query.message.edit_text(
            text=f"*¬ª …¢ ô·¥Ä…¥ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ¬´*"
            f"""

/gban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä] : …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥s ·¥õ ú·¥á ·¥Ñ ú·¥ú·¥õ…™ è·¥Ä “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥Ä…¥·¥Ö  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ  ú…™·¥ç “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.

/ungban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä] : …¢ ü·¥è ô·¥Ä ü ü è ·¥ú…¥ ô·¥Ä…¥s ·¥õ ú·¥á …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä.

/gbannedusers : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥…¥·¥á Ä ·¥ús·¥á Äs.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_6":
        query.message.edit_text(
            text=f"*¬ª  ü è Ä…™·¥ÑÍú± Íú∞·¥á·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú± ¬´*"
            f"""

/loop [·¥Ö…™s·¥Ä ô ü·¥á/·¥á…¥·¥Ä ô ü·¥á] ·¥è Ä [ ô·¥á·¥õ·¥°·¥á·¥á…¥ 1:10] 
: ·¥° ú·¥á…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ ·¥°…™ ü ü ·¥© ü·¥Ä è ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥© ü·¥Ä è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç …™…¥  ü·¥è·¥è·¥© “ì·¥è Ä 10 ·¥õ…™·¥ç·¥ás ·¥è Ä ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ü·¥è·¥è·¥©s.

/shuffle : s ú·¥ú“ì“ì ü·¥á ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs.

/seek : s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.

/seekback :  ô·¥Ä·¥Ñ·¥ã·¥°·¥Ä Ä·¥Ö s·¥á·¥á·¥ã ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥õ·¥è ·¥õ ú·¥á ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥.

/lyrics [s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á] : s·¥á·¥Ä Ä·¥Ñ ú  ü è Ä…™·¥Ñs “ì·¥è Ä ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö s·¥è…¥…¢ ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö ·¥õ ú·¥á  Ä·¥ás·¥ú ü·¥õs.

/shayri , /love , /gf , /bf : ùô∂ùô¥ùöÉ ùöÇùô∑ùô∞ùöàùöÅùô∏ ùôµùôæùöÅ ùô≤ùôæùöÑùôøùôªùô¥ùöÇ


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_7":
        query.message.edit_text(
            text=f"*¬ª üéÑ·¥© ü·¥Ä è ü…™s·¥õs “ì·¥á·¥Ä·¥õ·¥ú Ä·¥áüéÑ ¬´*"
            f"""

/playlist : ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Äs.

/deleteplaylist : ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä…¥ è s·¥Ä·¥†·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã …™…¥  è·¥è·¥ú Ä ·¥© ü·¥Ä è ü…™s·¥õ.

/play : s·¥õ·¥Ä Ä·¥õs ·¥© ü·¥Ä è…™…¥…¢ “ì Ä·¥è·¥ç  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥© ü·¥Ä è ü…™s·¥õ ·¥è…¥ s·¥á Ä·¥†·¥á Ä.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_8":
        query.message.edit_text(
            text=f"*¬ª  ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õs ¬´*"
            f"""

/activevoice : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs ·¥è…¥ ·¥õ ú·¥á  ô·¥è·¥õ.
/activevideo : s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õs ·¥è…¥  ô·¥è·¥õ.
/autoend [·¥á…¥·¥Ä ô ü·¥á|·¥Ö…™s·¥Ä ô ü·¥á] : ·¥á…¥·¥Ä ô ü·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä·¥ú·¥õ·¥è ·¥á…¥·¥Ö …™“ì …¥·¥è ·¥è…¥·¥á …™s  ü…™s·¥õ·¥á…¥…™…¥…¢.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_9":
        query.message.edit_text(
            text=f"*¬ª  ·¥© ü·¥Ä è “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á  ¬´*"
            f"""

‚Ä¢c s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥© ü·¥Ä è.
‚Ä¢v s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä ·¥†…™·¥Ö·¥á·¥è ·¥© ü·¥Ä è.
‚Ä¢force s·¥õ·¥Ä…¥·¥Ös “ì·¥è Ä “ì·¥è Ä·¥Ñ·¥á ·¥© ü·¥Ä è.

/play ·¥è Ä /vplay ·¥è Ä /cplay : s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ.

/playforce ·¥è Ä /vplayforce ·¥è Ä /cplayforce : “ì·¥è Ä·¥Ñ·¥á ·¥© ü·¥Ä è s·¥õ·¥è·¥©s ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã.

/channelplay [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä …™·¥Ö] ·¥è Ä [·¥Ö…™s·¥Ä ô ü·¥á] : ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥Ä …¢ Ä·¥è·¥ú·¥© ·¥Ä…¥·¥Ö s·¥õ·¥Ä Ä·¥õs s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ Ä·¥Ä·¥Ñ·¥ãs  ô è ·¥õ ú·¥á  ú·¥á ü·¥© ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös s·¥á…¥·¥õ …™…¥ …¢ Ä·¥è·¥ú·¥©.


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_10":
        query.message.edit_text(
            text=f"*¬ª üå≤…¢·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥°…™·¥õ ú  ô·¥è·¥õüå≤ ¬´*"
            f"""

  ú·¥á Ä·¥è·¥ã·¥ú :

/usage : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ö è…¥·¥è ·¥ús·¥Ä…¢·¥á ·¥è“ì ·¥õ ú·¥á ·¥ç·¥è…¥·¥õ ú.

  ô·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:

/restart :  Ä·¥ás·¥õ·¥Ä Ä·¥õs  è·¥è·¥ú Ä  ô·¥è·¥õ.

/update : ·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás ·¥õ ú·¥á  ô·¥è·¥õ “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ú·¥©s·¥õ Ä·¥á·¥Ä·¥ç  Ä·¥á·¥©·¥è.

/speedtest : ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä s·¥©·¥á·¥á·¥Ö.

/maintenance [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] : ·¥á…¥·¥Ä ô ü·¥á ·¥è Ä ·¥Ö…™s·¥Ä ô ü·¥á ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ.

/logger [·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á] :  ô·¥è·¥õ ·¥°…™ ü ü s·¥õ·¥Ä Ä·¥õ  ü·¥è…¢…¢…™…¥…¢ ·¥õ ú·¥á ·¥Ä·¥Ñ·¥õ…™·¥†…™·¥õ…™·¥ás  ú·¥Ä·¥©·¥©·¥á…¥ ·¥è…¥  ô·¥è·¥õ.

/logs […¥·¥ú·¥ç ô·¥á Ä ·¥è“ì  ü…™…¥·¥ás] : …¢·¥á·¥õ  ü·¥è…¢s ·¥è“ì  è·¥è·¥ú Ä  ô·¥è·¥õ [·¥Ö·¥á“ì·¥Ä·¥ú ü·¥õ ·¥†·¥Ä ü·¥ú·¥á …™s 100  ü…™…¥·¥ás]



""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_11":
        query.message.edit_text(
            text=f"*¬ª …¢·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥°…™·¥õ ú  ô·¥è·¥õ ¬´*"
            f"""

/start : s·¥õ·¥Ä Ä·¥õs ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ.

/help : …¢·¥á·¥õ  ú·¥á ü·¥© ·¥ç·¥á…¥·¥ú ·¥°…™·¥õ ú ·¥áx·¥© ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.

/reboot :  Ä·¥á ô·¥è·¥è·¥õs ·¥õ ú·¥á  ô·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õ.

/settings : s ú·¥è·¥°s ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥© s·¥á·¥õ·¥õ…™…¥…¢s ·¥°…™·¥õ ú ·¥Ä…¥ …™…¥·¥õ·¥á Ä·¥Ä·¥Ñ·¥õ…™·¥†·¥á …™…¥ ü…™…¥·¥á ·¥ç·¥á…¥·¥ú.

/sudolist : s ú·¥è·¥°s ·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥è“ì ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ.

""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥áüîô", callback_data="Music_"),
                    ]
                ]
            ),
        )
    elif query.data == "Music_12":
        query.message.edit_text(
            text=f"*¬ª ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥ò…™…¥…¢ ·¥èÍú∞  ô·¥è·¥õ ¬´*"
            f"""

/ping : ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢ ·¥èÍú∞ ·¥ç·¥úÍú±…™·¥Ñ·¥Ñ  ô·¥è·¥õ .


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Music_"),
                    ]
                ]
            ),
        )        
    elif query.data == "Music_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), random.choice(Sagiri_IMG), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )


def Gojoanime_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Gojoanime_":
        query.message.edit_text(
            text=f"""
 **·¥ã·¥è…¥…™·¥Ñ ú…™…™·¥°·¥Ä üçÅ   \n\n‚ãÑ  ú·¥á è·¥è ·¥°·¥á·¥á ôÍú± …™'·¥ç ·¥õ ú·¥á Íú±·¥Ä·¥õ·¥è Ä·¥ú …¢·¥è·¥ä·¥è ·¥èÍú∞ Íú±…™x ·¥á è·¥áÍú± ! \n\n‚ä≥ …™  ú·¥Ä·¥†·¥á  ü·¥è·¥õÍú± ·¥èÍú∞ Íú∞·¥ú…¥ Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥áÍú± ·¥Ä üÍú±·¥è ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á ÄÍú± ·¥Ä·¥õ·¥õ·¥Ä·¥Ñ ú·¥á·¥Ö ·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± Íú∞·¥è Ä ·¥è·¥õ·¥Ä·¥ã·¥úÍú±! \n\n‚ä≥ ·¥° ú…™·¥Ñ ú  ú·¥á ü·¥òÍú± ·¥°·¥á·¥á ôÍú± ·¥õ·¥è Íú∞…™…¥·¥Ö ·¥Ö…™Íú∞Íú∞·¥á Ä·¥á…¥·¥õ ·¥õ è·¥ò·¥áÍú± ·¥èÍú∞ ·¥Ä…¥…™·¥ç·¥á & ·¥ç·¥Ä…¥…¢·¥Ä ·¥Ä üÍú±·¥è ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä…¥…™·¥ç·¥á …¢…™ Ä üÍú± ·¥Ñ·¥èÍú±·¥ò ü·¥Ä èÍú±! \n\n‚ä≥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥…™·¥ç·¥á, ·¥õ ú…™·¥á Ä ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú± & ·¥ç·¥è Ä·¥á! ** 
""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        
                InlineKeyboardButton(
                    text="·¥Ä…™ Ä…™…¥…¢",
                    callback_data="Gojoanime_1",
                ),
                InlineKeyboardButton(
                    text="·¥°·¥Ä…™Íú∞·¥úÍú±",
                    callback_data="Gojoanime_2",
                ),
            
                InlineKeyboardButton(
                    text=" ü·¥á·¥°·¥Ö",
                    callback_data="Gojoanime_3",
                ),
            ], 
            [
                InlineKeyboardButton(
                    text="·¥Ä…¥…™·¥ç·¥á",
                    callback_data="Gojoanime_4",
                ),
                InlineKeyboardButton(
                    text="·¥ç·¥Ä…¥…¢·¥Ä",
                    callback_data="Gojoanime_5",
                ),
                InlineKeyboardButton(
                    text="·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä",
                    callback_data="Gojoanime_6",
                ),
            ],   
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥áüîô", callback_data="sagiri_back"),
                    ],
                ]
           ),
        )
    elif query.data == "Gojoanime_1":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f"""


‚ãÑ ·¥õ è·¥ò·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä…¥·¥Ö …¢·¥á·¥õ …™…¥Íú∞·¥è ·¥è…¥ ·¥Ä…™ Ä…™…¥…¢ Íú±·¥õ·¥Ä·¥õ·¥úÍú± ·¥èÍú∞ ·¥Ä…¥…™·¥ç·¥á 

*Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á*

/airing ‚ñ∫ /·¥Ä…™ Ä…™…¥…¢ ·¥ä·¥ú ·¥ä·¥ú·¥õÍú±·¥ú ·¥ã·¥Ä…™Íú±·¥á…¥

‚ó¨…¥·¥è·¥õ·¥á  ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )
    elif query.data == "Gojoanime_2":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f"""

‚ãÑ ·¥õ·¥è …¢·¥á·¥õ  Ä·¥Ä…¥·¥Ö·¥è·¥ç …™·¥ç·¥Ä…¢·¥áÍú± ·¥èÍú∞ ·¥°·¥Ä…™Íú∞·¥ú'Íú±  ü…™·¥ã·¥á :-

/Íú± ú…™…¥·¥è ô·¥ú               /Íú±·¥ç…™ ü·¥á
/Íú∞·¥èx…¢…™ Ä ü               / ú·¥Ä·¥ò·¥ò è
/·¥°·¥Ä…™Íú∞·¥úÍú±                /·¥Ö·¥Ä…¥·¥Ñ·¥á
/…¥·¥á·¥ã·¥è                   / ô…™·¥õ·¥á
/·¥Ä·¥°·¥è·¥è                  /·¥°…™…¥·¥ã

Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á

‚ñ∫ /shinobu

‚ó¨…¥·¥è·¥õ·¥á¬† ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!

""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )
    elif query.data == "Gojoanime_3":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f""" 

‚ãÑ ·¥õ Ä è ·¥õ ú…™Íú± ·¥áx·¥Ñ ü·¥úÍú±…™·¥†·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ ·¥ò…™·¥Ñ·¥õ·¥ú Ä·¥áÍú± ·¥èÍú∞ ·¥Ä…¥…™·¥ç·¥á ·¥Ñ·¥èÍú±·¥ò ü·¥Ä è·¥á ÄÍú±!

Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á

/·¥Ñ·¥èÍú±·¥ò ü·¥Ä è ‚ñ∫ ·¥õ·¥è …¢·¥á·¥õ …™·¥ç·¥Ä…¢·¥áÍú± ·¥èÍú∞ ·¥Ä…¥…™·¥ç·¥á …¢…™ Ä üÍú± ·¥Ñ·¥èÍú±·¥ò ü·¥Ä è·¥á ÄÍú±.

/ ü·¥á·¥°·¥Ö ‚ñ∫ ·¥õ·¥è …¢·¥á·¥õ 18+ …™·¥ç·¥Ä…¢·¥áÍú± ·¥èÍú∞ ·¥Ä…¥…™·¥ç·¥á  …¢…™ Ä ü ·¥Ñ·¥èÍú±·¥ò ü·¥Ä è·¥á ÄÍú±.

‚ó¨ …¥·¥è·¥õ·¥á¬† ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text=" ú·¥è·¥ç·¥áüîô", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )
    elif query.data == "Gojoanime_4":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f"""

‚ãÑ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥ è ·¥Ä…¥…™·¥ç·¥á

Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á

/anime ‚ñ∫ /·¥Ä…¥…™·¥ç·¥á ·¥ä·¥úÍú± ·¥ä·¥ú·¥õÍú±·¥ú ·¥ã·¥Ä…™Íú±·¥á…¥

‚ó¨ …¥·¥è·¥õ·¥á¬† ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )
    elif query.data == "Gojoanime_5":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f"""

‚ãÑ ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ ·¥ã…¥·¥è·¥° ü·¥á·¥Ö…¢·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥…¢ ·¥ã…™…¥·¥Ö ·¥èÍú∞ ·¥ç·¥Ä…¥…¢·¥Ä

Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á

/manga ‚ñ∫ /·¥ç·¥Ä…¥…¢·¥Ä ·¥è…¥·¥á ·¥ò·¥ú…¥·¥Ñ ú ·¥ç·¥Ä…¥

‚ó¨ …¥·¥è·¥õ·¥á¬† ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )
    elif query.data == "Gojoanime_6":
        query.message.edit_text(
            text=f"*‚õ©·¥Ä…¥…™·¥ç·¥á Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥èÍú∞ …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú‚õ©*"
            f"""

‚ãÑ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è …¢·¥á·¥õ …™…¥Íú∞·¥è ·¥Ä ô·¥è·¥ú·¥õ ·¥Ä…¥…™·¥ç·¥á & ·¥ç·¥Ä…¥…¢·¥Ä ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á ÄÍú±!

Íú∞·¥è Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á

/character ‚ñ∫ /·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …¢·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú

‚ó¨ …¥·¥è·¥õ·¥á¬† ‚ñ∫ ·¥õ è·¥ò·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ·¥Ä…¥·¥Ö ùöÄ·¥ú·¥á Ä è …™…¥ …¥·¥è Ä·¥ç·¥Ä ü Íú∞·¥è…¥·¥õÍú±!


""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üîô ô·¥Ä·¥Ñ·¥ã", callback_data="Gojoanime_"),
                    ]
                ]
            ),
        )  
    elif query.data == "Gojoanime_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), random.choice(Sagiri_IMG), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=False,
        )     

                        
def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="  ú·¥á ü·¥ò ",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "¬ª ·¥Ñ ú·¥è·¥èÍú±·¥á ·¥Ä…¥.·¥è·¥ò·¥õ…™·¥è…¥ Íú∞·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ú·¥á ü·¥ò ",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Gùô¥·¥õ  ú·¥á ü·¥ò",
                            url="https://t.me/{}?start=help".format(
                                context.bot.username
                            ),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="Hùô¥ ü·¥ò ·¥ç·¥á…¥·¥ú",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚úØ –≤Œ±œ≤–∫ ‚úØ", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text="Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "Click here to get this chat's settings, as well as yours."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s‚Äã",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "Click here to check your settings."

    else:
        send_settings(chat.id, user.id, True)


def donate(update: Update, context: CallbackContext):
    user = update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    bot = context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )

        if OWNER_ID != {OWNER_ID} and DONATION_LINK:
            update.effective_message.reply_text(
                f"¬ª ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ·¥è“ì {dispatcher.bot.first_name} s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á …™s [PIRO OWNER](tg://user?id={OWNER_ID})"
                f"\n\n ô·¥ú·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥©·¥á Äs·¥è…¥ ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  Ä·¥ú…¥…¥…™…¥…¢ ·¥ç·¥á : [ ú·¥á Ä·¥á]({DONATION_LINK})",
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

    else:
        try:
            bot.send_message(
                user.id,
                DONATE_STRING,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
            )

            update.effective_message.reply_text(
                "…™'·¥†·¥á ·¥ò·¥ç'·¥á·¥Ö  è·¥è·¥ú ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥õ·¥è ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä!"
            )
        except Unauthorized:
            update.effective_message.reply_text(
                "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì…™ Äs·¥õ ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥."
            )


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendAnimation(
                f"@Gojo_support_chat",
                animation="https://telegra.ph/file/884a4158f0d0b56105e3b.mp4",
                caption=f"""
„Ö§ üßÉ„Ö§{dispatcher.bot.first_name} …™s ·¥Ä ü…™·¥†·¥á.

¬†‚ú†·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö·öö‚òá
  ü´ß ·¥ç è ·¥è·¥°…¥·¥á Ä : [ùô∂·¥è·¥ä·¥è Íú±·¥Ä·¥õ·¥è Ä·¥ú](https://t.me/Gojo_Satoru_botx)
  ‚óé **·¥ò è·¥õ ú·¥è…¥ :** `{y()}`
  ‚óé ** ü…™ ô Ä·¥Ä Ä è :** `{telever}`
  ‚óé **·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ :** `{tlhver}`
  ‚óé **·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç :** `{pyrover}`
  ‚óé ** ô·¥è·¥õ ·¥†·¥á ÄÍú±…™·¥è…¥ :** 1.0
‚àù‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ï∫‚ü≥

""",
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @Gojo_support_chat, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    CommandHandler("test", test)
    start_handler = CommandHandler("start", start)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_.*")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    about_callback_handler = CallbackQueryHandler(
        Sagiri_about_callback, pattern=r"sagiri_"
    )
    Music_callback_handler = CallbackQueryHandler(
        Music_about_callback, pattern=r"Music_"
    )
    Gojoanime_callback_handler = CallbackQueryHandler(
        Gojoanime_about_callback, pattern=r"Gojoanime_"
    )
    donate_handler = CommandHandler("donate", donate)
    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)

    # dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(Music_callback_handler)
    dispatcher.add_handler(Gojoanime_callback_handler)  
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_callback)

    LOGGER.info("üåπùêÅùêéùêì ùêíùêìùêÄùêëùêìùêÑùêÉ ùêíùêîùêÇùêÇùêÑùêíùêíùêÖùêîùêãùêãùêîüå±\n\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‡Æú€©€û€©‡Æú‚ïê‚ïê‚ïê‚ïê‚ïó\n\nmade by anonymous and jashan\n\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‡Æú€©€û€©‡Æú‚ïê‚ïê‚ïê‚ïê‚ïù")
    updater.start_polling(timeout=15, read_latency=4, clean=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
